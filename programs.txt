You have a list of employee objects representing the company's staff, 
with each object containing the following attributes:
    - name (String)
    - age (int)
    - department (String)
    - salary (double)

Write a Java program that reads the number of employees and their details 
from user input, where each employeeâ€™s data is entered on a single line 
in the format: name age department salary.

Your task is to perform the following operations Using the Streams API:
    - Filter the list to include only employees with a salary greater than 50,000.
    - Map the remaining employees to a new list of their names only.
    - Reduce the salaries of the remaining employees to calculate the 
      total salary expenditure for these employees.
    - Partition the list of employees into two groups: 
        - one with employees above 30 years of age.
        - another with employees 30 years or younger.

Implement each operation using the appropriate Java Streams methods.

Expected Outcome:
----------------
    - A filtered list of employee names whose salary is greater than 50,000.
    - The total salary expenditure of employees earning above 50,000.
    - Two partitioned groups of employees: 
        one with age > 30, and the other with age <= 30.
        
Sample Input:
-------------
6
Alice 25 IT 60000
Bob 35 Finance 45000
Charlie 28 IT 52000
David 40 HR 70000
Eve 30 Finance 49000
Frank 32 IT 80000

Sample Output:
--------------
Names of Employees with Salary > 50,000:
[Alice, Charlie, David, Frank]
Total Salary Expenditure for Employees with Salary > 50,000:
262000.0
Employees above 30 years of age:
[Employee{name='Bob', age=35, department='Finance', salary=45000.0}, Employee{name='David', age=40, department='HR', salary=70000.0}, Employee{name='Frank', age=32, department='IT', salary=80000.0}]
Employees 30 years or younger:
[Employee{name='Alice', age=25, department='IT', salary=60000.0}, Employee{name='Charlie', age=28, department='IT', salary=52000.0}, Employee{name='Eve', age=30, department='Finance', salary=49000.0}]
                      


2.)There are some spherical balloons taped onto a flat wall that represents the XY-plane. 
The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] 
denotes a balloon whose horizontal diameter stretches between xstart and xend. 
You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different 
points along the x-axis. 
A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. 
There is no limit to the number of arrows that can be shot. 
A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

Input Format:
-------------
Line-1: Two integers m and n, where m is the number of balloons and n is always 2, representing the range [x_start, x_end] for each balloon.
Line-2 to m: The next m lines contain n integers each, representing the start and end points of each balloon.

Output Format:
--------------
Line-1: Print a single integer representing the minimum number of arrows required to burst all the balloons.

Constraints:
-------------
*1 <= m <= 10^5 (number of balloons)
*0 <= x_start <= x_end <= 10^9 (range of balloon positions)
*The input is guaranteed to be such that the number of arrows needed is always finite.

Sample Input-1:
---------------
4 2
10 16
2 8
1 6
7 12

Sample Output-1:
----------------
2

Sample Input-2:
---------------
4 2
1 2
3 4
5 6
7 8

Sample Output-2:
----------------
4

Sample Input-3:
---------------
4 2
1 2
2 3
3 4
4 5

Sample Output-3:
----------------
2

Sample Input-4:
---------------
8 2
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9

Sample Output:
--------------
4

Sample Input-5:
---------------
10 2
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11

Sample Output-5:
----------------
5